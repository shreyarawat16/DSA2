https://leetcode.com/problems/sum-of-subarray-minimums/

class Solution {
public:

    int sumSubarrayMins(vector<int>& arr) {
        int n= arr.size();
        int mod= 1e9+7;
        vector<int> left(n,-1);
        vector<int> right(n,n);
        stack<int> st;
        for(int i=0; i<n; i++){
        while(!st.empty() && arr[st.top()]> arr[i]){
            st.pop();
        }
        if(!st.empty()){
            left[i]= st.top();
        }
        st.push(i);
        }
        
        stack<int> st2;
     for(int i=n-1; i>=0; i--){
        while(!st2.empty() && arr[st2.top()]>= arr[i]){
            st2.pop();
        }
        if(!st2.empty()){
            right[i]= st2.top();
        }
        st2.push(i);
     }
        long long sum=0;
        for(int i=0; i<n; i++){
 sum = (sum + (long long)arr[i] * (i - left[i]) * (right[i] - i)) % mod;
        
        }
        return (int)sum;
    }
};
