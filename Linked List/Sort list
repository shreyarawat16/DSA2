https://leetcode.com/problems/sort-list/

class Solution{
    public:
 
ListNode* middle(ListNode* &head){
        ListNode*slow= head;
        ListNode*fast= head->next;
        while(fast!=NULL &&fast->next!=NULL){
            slow=slow->next;
            fast= fast->next->next;
        }
        return slow;
    }

    ListNode* merge(ListNode* &left, ListNode* &right){
            if(left==NULL) return right;
            if(right==NULL) return left;
            ListNode* temp1=left, *temp2=right;
           ListNode* anshead=NULL, *anstail=NULL;
           while(temp1!=NULL && temp2!=NULL){
            if(temp1->val <= temp2->val){
                if(anshead==NULL){
                    anshead=temp1;
                    anstail=temp1;
                }
                else{
                anstail->next=temp1;
                anstail=temp1;
            }
            temp1=temp1->next;
            }
            else if(temp2->val <= temp1->val){
                if(anshead==NULL){
                anshead=temp2;
                anstail=temp2;
                }
                else{
                    anstail->next=temp2;
                    anstail=temp2;
                }
                temp2=temp2->next;
            }
            
        }
        while(temp1!=NULL){
            anstail->next= temp1;
            anstail=temp1;
            temp1=temp1->next;
        }
        while(temp2!=NULL){
            anstail->next= temp2;
            anstail=temp2;
            temp2=temp2->next;
        }
        return anshead;
    }
        ListNode* sortList(ListNode* head) {
            if(head==NULL || head->next==NULL){
                return head;
            }

            //break into two halves
            ListNode* mid= middle(head);
            ListNode* left= head;
            ListNode* right= mid->next;
            mid->next=NULL;
            
            //Sort 
            left=sortList(left);
            right=sortList(right);

            ListNode* mergeLL= merge(left,right);
            return mergeLL;   

        }
    };
