https://leetcode.com/problems/design-linked-list/

class MyLinkedList {
    class Node{
        public:
        int data;
        Node* next;
        Node(int data){
            this->data= data;
            this->next=NULL;
        }
    };
    Node* head=NULL, *tail=NULL;
    int size=0;
public:
    MyLinkedList() {
        
    }
    
    int get(int index) {
        if(index<0 || index>=size) return -1;
        Node* temp=head;
        for(int i=0; i<index; i++){
            temp= temp->next;
        }
        return temp->data;
    }
    
    void addAtHead(int val) {
        Node* newnode= new Node(val);
        if(head==NULL){
            head= newnode;
            tail=newnode;
        }
        else{
            newnode->next= head;
            head= newnode;
        }
        size++;
    }
    
    void addAtTail(int val) {
        Node* newnode= new Node(val);
        if(head==NULL){
            head= newnode;
            tail= newnode;
        }
        else{
            tail->next= newnode;
            tail= newnode;
        }
        size++;
    }
    
    void addAtIndex(int index, int val) {
        if(index<0 || index>size){
            return;
        }
        if(index==0){
            addAtHead(val);
            return;
        }
        if(index== size){
            addAtTail(val);
            return;
        }
        Node* newnode= new Node(val);
        Node* temp= head;
        int i=0;
        while(i< index-1 ){
            i++;
            temp=temp->next;
        }
        Node* a= temp->next;
        temp->next= newnode;
        newnode->next= a;
        size++;
    }
    Node* getNodeAtIndex(int index){
        if(index<0 || index>= size) return NULL;
        Node* temp= head;
        for(int i=0; i< index; i++){
            temp= temp->next;
        }
        return temp;
    }
    void deleteAtIndex(int index) {
        if(index<0 || index>= size) return;
        if(size==1){
            head= NULL;
            tail= NULL;
            size--;
            return;
        }
        if(index==0){
            head= head->next;
            size--;
            return;
        }
    
        Node* prev= getNodeAtIndex(index-1);
         if(index== size-1){
            prev->next=NULL;
            tail= prev;
         }
         else{
            prev->next= prev->next->next;
         }
         size--;
    }
};

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList* obj = new MyLinkedList();
 * int param_1 = obj->get(index);
 * obj->addAtHead(val);
 * obj->addAtTail(val);
 * obj->addAtIndex(index,val);
 * obj->deleteAtIndex(index);
 */
// class MyLinkedList {
//     class Node{
//     public:
//     int data;
//     Node* next;
//     Node(int data){
//         this->data= data;
//         this->next= NULL;
//     }
// };
//     public:
//     Node* head, *tail;
//     int size;

//     MyLinkedList() {
//         head= NULL;
//         tail= NULL;
//         size=0;
//     }

//     int get(int index) {
//         if(index<0 || index>= size){
//             return -1;
//         }
//         Node* temp= head;
//         for(int i=0; i< index; i++){
//             temp= temp->next;
//         }
        
//        return temp->data;
       
//     }
    
//     void addAtHead(int val) {
//         Node* newnode= new Node(val);
//        if(head==NULL ){
//         head= newnode;
//         tail= newnode;
//        }
//        else{
//         newnode->next= head;
//         head= newnode;
        
//        }
//        size+=1;
//      //  print(head);
//     }
    
//     void addAtTail(int val) {
//         Node* newnode= new Node(val);
//        if(head== NULL){
//         head= newnode;
//         tail= newnode;
//        }
//        else{
//         tail->next=newnode;
//         tail= newnode;
//        }
//        size+=1;
      
//     }
    
//     void addAtIndex(int index, int val) {
//        if(index< 0 || index> size) return;

//         if(index==0){
//             addAtHead(val);
//             return;
//         }
       
//          Node* newnode= new Node(val);
//          int i=0;
//          Node* temp= head;
//          while(temp!=NULL){
            
//             if(i== index-1){
//                 Node* a= temp->next;
//               temp->next= newnode;
//               newnode->next= a;
//               tail= newnode;
//               break;
//             }
//             i++;
//             temp= temp->next;
            
//          }
//          size+=1;
//         // print(head);
//     }
//     Node* getNodeAtIndex(int index){
//         if(index < 0 || index >= size) return NULL;
//         Node* temp = head;
//         for(int i=0;i<index;i++){
//             temp = temp->next;
//         }
//         return temp;
//     }
// void deleteAtIndex(int index) {
//         if(index<0 || index>= size){
//             return;
//         }
//         if(size==1){
//             head=NULL, tail=NULL;
//             size--;
//             return;
//         }
//         if(index==0){
//             Node* temp= head;
//             head= head->next;
//             delete temp;
//             size-=1;
//             return;
//         }
//         Node* prev = getNodeAtIndex(index - 1); //1 2 3 4 5
//         if(index == size -1){
//             tail = prev;
//             tail->next = NULL;
//         }
//         else{
//             prev->next = prev->next->next;
//         }
//         size--;
//         }
//         // Node* temp= head;
//         // int i=0;
//         // while(i < index-1 && temp){
//         //   i++;
//         //   temp=temp->next;
//         // }
//         // if(temp->next->next==NULL){
//         //     temp->next= NULL;
//         // }
//         // else{
//         // temp->next= temp->next->next;
//         // return;
        
        
//         // print(head);

//    // }
    
    
//       // Function to print the linked list
//     /*void print(Node* head) {
//         if (head == NULL) return;

//         Node* temp = head;
//         while(temp!=NULL) {
//             cout << temp->data << "->";
//             temp = temp->next;
//         }
//         cout << endl;
//     }  */   
// };





/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList* obj = new MyLinkedList();
 * int param_1 = obj->get(index);
 * obj->addAtHead(val);
 * obj->addAtTail(val);
 * obj->addAtIndex(index,val);
 * obj->deleteAtIndex(index);
 */
