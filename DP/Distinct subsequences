https://leetcode.com/problems/distinct-subsequences/submissions/

class Solution {
public:
//TABULATION. TC: O(N*M), SC: O(N*M)
int numDistinct(string s, string t) {
        //Step1 Express in terms of indexes
        int n= s.size(), m= t.size();
        vector<vector<double>> dp(n+1, vector<double>(m+1,0));
       //BASE CASE
       for(int i=0; i<=n; i++){
        dp[i][0]=1;
       }
      //ignored i==0 case because everything is 0 in the dp array already
       //Explore all possibilities
       //BOTTOM UP
       for(int i=1; i<=n; i++){
        for(int j=1; j<=m; j++){
             if(s[i-1]== t[j-1]){
                  dp[i][j] =dp[i-1][j-1]+ dp[i-1][j];
                }
                else{
                    dp[i][j]= dp[i-1][j];
                }
            }
        }
        return (int)dp[n][m];
    }
};
//MEMOIZATION. TC: o(n*m)= no. of states, SC:O(N*M)+ O(N+M)-> AUXILLARY STACK SPACE
/*
int solve(int i, int j, string s1, string s2, vector<vector<int>> dp){
    //BASE CASE
    if(j<0){
        return 1; //When all characters of s2 are matched
    }
    if(i<0){
        return 0;
    }
if(dp[i][j]!=-1){
    return dp[i][j];
}
    //Step2 explore all possibilities
     if(s1[i]== s2[j]){
       return dp[i][j] =solve(i-1, j-1, s1, s2, dp)+ solve(i-1, j, s1, s2, dp);
     }
     else{
        return dp[i][j]= solve(i-1, j, s1, s2, dp);
     }
    //Steps3 Return summation of all possibilities. Already returned above
}
    int numDistinct(string s, string t) {
        //Step1 Express in terms of indexes
        int n= s.size(), m= t.size();
        vector<vector<int>> dp(n, vector<int>(m,-1));
        int ans =  solve(n-1, m-1, s, t, dp);
        return ans;
        
    }
};
*/
//RECURSION. TC: EXPONENTIAL, SC: O(N+M)
/*
int solve(int i, int j, string s1, string s2){
    //BASE CASE
    if(j<0){
        return 1; //When all characters of s2 are matched
    }
    if(i<0 && j>=0){
        return 0;
    }

    //Step2 explore all possibilities
     if(s1[i]== s2[j]){
       return solve(i-1, j-1, s1, s2)+ solve(i-1, j, s1, s2);
     }
     else{
        return solve(i-1, j, s1, s2);
     }
    //Steps3 Return summation of all possibilities. Already returned above
}
    int numDistinct(string s, string t) {
        //Step1 Express in terms of indexes
        int n= s.size(), m= t.size();
        int ans =  solve(n-1, m-1, s, t);
        return ans;
        
    }
};
*/
