https://leetcode.com/problems/partition-equal-subset-sum/description/

class Solution {
public:
//TABULATIION
bool subsetSum(vector<int>& arr, int target){
    int n= arr.size();
     vector<vector<bool>> dp(n, vector<bool>(target+1, 0));
     for(int i=0; i<n ; i++){
        dp[i][0]= true;
     }
        if (arr[0] <= target) {
        dp[0][arr[0]] = true;
        }

     for(int i=1; i<n; i++){
        for(int j=1; j<= target; j++){
            bool notTake= dp[i-1][j];
            bool take= false;
            if(j>= arr[i]){
                take= dp[i-1][j-arr[i]];
            }
            dp[i][j]= take || notTake;
        }
     } 
   return dp[n-1][target];
}
    bool canPartition(vector<int>& nums) {
        int sum=0;
        int n= nums.size();
        for(int i=0; i<n; i++){
            sum+= nums[i];
        }
       
        if(sum%2!=0){
            return false;
        }
        int target= sum/2;
        return subsetSum(nums, target);
    
    }

//MEMOIZATION
//RUNNING
/*
bool solve(int i, vector<int>& nums, int target, vector<vector<int>>& dp){
   if(target==0){
        return true;
    }
    if(i==0){
        return nums[0]== target;
    }
    
    if(dp[i][target]!= -1){
        return dp[i][target];
    }
    bool notTake= solve(i-1, nums, target, dp);
    bool take= false;
    if(nums[i]<= target){
        take= solve(i-1, nums, target-nums[i], dp);
    }
    return dp[i][target]= take || notTake;
}
bool subsetSum(vector<int>& arr, int target){
    int n= arr.size();
     vector<vector<int>> dp(n+1, vector<int>(target+1, -1));
    bool val= solve(n-1, arr, target, dp);
    return val;
}
    bool canPartition(vector<int>& nums) {
        int sum=0;
        int n= nums.size();
        for(int i=0; i<n; i++){
            sum+= nums[i];
        }
       
        if(sum%2!=0){
            return false;
        }
        int target= sum/2;
        return subsetSum(nums, target);
    
    }
*/
};
