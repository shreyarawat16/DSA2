https://leetcode.com/problems/cherry-pickup-ii/submissions/1335429416/

class Solution {
public:
//TABULATION
int cherryPickup(vector<vector<int>>& grid) {
    int n= grid.size(), m= grid[0].size();
 vector<vector<vector<int>>> dp(101, vector<vector<int>>(101, vector<int>(101, -1)));
 //BASE CASE
        for(int j1=0; j1<m; j1++){
            for(int j2=0; j2<m; j2++){
                if(j1== j2){
                    dp[n-1][j1][j2]= grid[n-1][j1];
                }
                else{
                    dp[n-1][j1][j2]= grid[n-1][j1]+ grid[n-1][j2];
                }
            }
        }
       
    for(int i=n-2; i>=0; i--){
        for(int j1=0; j1<m ; j1++){
            for(int j2=0; j2<m; j2++){
                 int maxi= -1e9;
              for(int delj1=-1; delj1<=1; delj1++){
                for(int delj2=-1; delj2<=1; delj2++){
                    int val=0;
                      if(j1== j2){
                          val= grid[i][j1];
                          }
                      else{
                         val= grid[i][j1]+ grid[i][j2];
                         }
                        if(j1+delj1>=0 && j1+delj1<m &&
                         j2+delj2>=0 && j2+delj2<m){
                            val+= dp[i+1][j1+delj1][j2+delj2];
                         }
                         else{
                            val+= -1e9;
                         }
                         maxi= max(maxi, val);
                         }
                    }
                    dp[i][j1][j2]= maxi;
                }
            }
        }
    
    return dp[0][0][m-1];
    }
//MEMOIZATION. TC: O(N*M*M)*9, SC: O(N*M*M)+ O(N) [recursion stack space]
/*
int solve(int i, int j1, int j2, vector<vector<int>>& grid, int n, int m,vector<vector<vector<int>>>& dp){
    if(j1<0 || j1>=m || j2<0 || j2>=m){
        return -1e9;
    }
    if(i== n-1){
        if(j1== j2){
            return grid[i][j1];
        }
        else{
            return grid[i][j1]+ grid[i][j2];
        }
    }
    if(dp[i][j1][j2]!=-1){
        return dp[i][j1][j2];
    }
    
    int maxi=0;
    for(int delj1=-1; delj1<=1; delj1++){
        for(int delj2=-1; delj2<=1; delj2++){
            if(j1== j2){
maxi= max(maxi, grid[i][j1]+ solve(i+1, j1+delj1, j2+ delj2, grid, n, m, dp));
               }
            else{
maxi= max(maxi, grid[i][j1]+ grid[i][j2]+ solve(i+1, j1+delj1, j2+ delj2, grid, n, m, dp));
               }
            dp[i][j1][j2]=maxi;   
        }
    }
    return dp[i][j1][j2];
}
    int cherryPickup(vector<vector<int>>& grid) {
        int n= grid.size(), m= grid[0].size();
        vector<vector<vector<int>>> dp(101, vector<vector<int>>(101, vector<int>(101, -1)));
        int ans= solve(0,0, m-1, grid, n, m, dp);
        return ans;
    }
*/
//Recursion. TC: O(3^N * 3^N), SC: O(N)
/*
int solve(int i, int j1, int j2, vector<vector<int>>& grid, int n, int m){
    if(j1<0 || j1>=m || j2<0 || j2>=m){
        return -1e9;
    }
    if(i== n-1){
        if(j1== j2){
            return grid[i][j1];
        }
        else{
            return grid[i][j1]+ grid[i][j2];
        }
    }
    
    int maxi=0;
    for(int delj1=-1; delj1<=+1; delj1++){
        for(int delj2=-1; delj2<=+1; delj2++){
            int val=0;
             if(j1== j2){
               val = grid[i][j1];
               }
               else{
               val= grid[i][j1]+ grid[i][j2];
               }
            val+= solve(i, j1+delj1, j2+delj2, grid, n, m);
            maxi= max(maxi, val);
        }
    }
    return maxi;
}
    int cherryPickup(vector<vector<int>>& grid) {
        int n= grid.size(), m= grid[0].size();
        int ans= solve(0,0, m-1, grid, n, m);
        return ans;
    }
*/
};
