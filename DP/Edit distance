https://leetcode.com/problems/edit-distance/submissions/1350037109/

class Solution {
public:
//TABULATION. TC: O(N*M), SC: O(N*M)
int minDistance(string word1, string word2) {
        int n= word1.size(), m= word2.size();
        vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
        //BASE CASE
        
        for(int i=0; i<=n; i++){
            dp[i][0]= i;
        }
        for(int j=1; j<=m; j++){
            dp[0][j]= j;
        }
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(word1[i-1]== word2[j-1]){
                        dp[i][j]= dp[i-1][j-1];
                }
                 else{
                    // delete character 
                    int op1=  dp[i-1][j];
                    //edit      
                    int op2=  dp[i-1][j-1];
                    //insert
                    int op3= dp[i][j-1];
                        dp[i][j]= 1+min(op1, min(op2, op3));
                    }
                }
            }
            return dp[n][m];
    }
};
//MEMOIZATION. TC: O(N*M), SC: O(N*M)+O(N+M)
/*
int solve(int i, int j, string s1, string s2, vector<vector<int>>& dp){
    //Base case
  if(i<0){
    return j+1;
  }
  if(j<0){
    return i+1;
  }
  if(dp[i][j]!= -1){
    return dp[i][j];
  }
//STEP 2-> EXPLORE ALL POWSSIBILITIES
    if(s1[i]!= s2[j]){
    // delete character 
      int op1= 1+ solve(i-1, j, s1, s2, dp);
    //edit      
      int op2= 1+solve(i-1, j-1, s1, s2, dp);
      //insert
      int op3= 1+ solve(i, j-1, s1, s2, dp);
        return dp[i][j]= min(op1, min(op2, op3));
    }
    else if(s1[i]== s2[j]){
        return dp[i][j]= solve(i-1, j-1, s1, s2, dp);
    }
 return 0;
}
    int minDistance(string word1, string word2) {
        int n= word1.size(), m= word2.size();
        vector<vector<int>> dp(n, vector<int>(m, -1));
        int ans= solve(n-1, m-1, word1, word2, dp);
        return ans;
    }
};
*/
//Recursion. TC: 0(3^N), SC: O(3^N)
/*
int solve(int i, int j, string s1, string s2){
    //Base case
   if(i<0){
    return j+1;
  }
  if(j<0){
    return i+1;
  }
  
//STEP 2-> EXPLORE ALL POWSSIBILITIES
    if(s1[i]!= s2[j]){
    // delete character 
      int op1= 1+ solve(i-1, j, s1, s2);
    //edit      
      int op2= 1+solve(i-1, j-1, s1, s2);
      //insert
      int op3= 1+ solve(i,j-1, s1, s2);
return min(op1, min(op2, op3));
    }
    else{
        return solve(i-1, j-1, s1, s2);
    }

}
    int minDistance(string word1, string word2) {
        int n= word1.size(), m= word2.size();
        int ans= solve(n-1, m-1, word1, word2);
        return ans;
    }
};
*/
