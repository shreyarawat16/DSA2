https://leetcode.com/problems/unique-paths-ii/submissions/1331968243/

class Solution {
public:
//TABULATION
int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n= obstacleGrid.size();
        int m= obstacleGrid[0].size();
        vector<vector<int>> dp(n, vector<int>(m,0));
        dp[0][0]=1;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if( obstacleGrid[i][j]==1){
                    dp[i][j]=0;
                }
                else if(i==0 && j==0) dp[i][j]=1;
                else{
                int up=0, left=0;
                if(i>0) up= dp[i-1][j];
                if(j>0) left= dp[i][j-1];
                dp[i][j]= up+left;
            }
        }
    }
        return dp[n-1][m-1];
}
//MEMOIZATION
/*
int solve(int i, int j, vector<vector<int>>& grid, vector<vector<int>>& dp){
    if(i>=0 && j>=0 && grid[i][j]==1){
        return 0;
    }
    if(i==0 && j==0){
        return 1;
    }
    if(i<0 || j<0){
        return 0;
    }
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
    
    int up= solve(i-1, j, grid, dp);
    int left= solve(i, j-1, grid, dp);
    dp[i][j]= up+left;
return dp[i][j];
}
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n= obstacleGrid.size();
        int m= obstacleGrid[0].size();
        vector<vector<int>> dp(n, vector<int>(m,-1));
        int ans=solve(n-1,m-1,obstacleGrid, dp);
        return ans;

}
*/    
//RECURSION
/*
int solve(int i, int j, vector<vector<int>>& grid){
    if(i>=0 && j>=0 && grid[i][j]==1){
        return 0;
    }
    if(i==0 && j==0){
        return 1;
    }
    if(i<0 || j<0){
        return 0;
    }
    int ans=0;
    
    int up= solve(i-1, j, grid);
    int left= solve(i, j-1, grid);
    return up+left;

}
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n= obstacleGrid.size();
        int m= obstacleGrid[0].size();
        int ans=solve(n-1,m-1,obstacleGrid);
        return ans;

    }
 */   
};
