https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/submissions/1350862199/

class Solution {
public:
//TABULATION TC: O(N*2*3), SC: O(N*2*3)
int maxProfit(vector<int>& prices) {
        int n= prices.size();
    vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(2, vector<int>(3,0)));
        //BASE CASE
        //ignore base case as dp is already filled with 0's
        /*
         for(int i=0; i<n; i++){
            for(int buy=0; buy<2; buy++){
                dp[i][buy][0]=0;
            }
        }
        for(int buy=0; buy<2; buy++){
            for(int cap=0; cap<3; cap++){
                dp[n][buy][cap]=0;
            }
        }
       */
        for(int ind= n-1; ind>=0; ind--){
            for(int buy=0; buy<2; buy++){
                for(int cap=1; cap<3; cap++){
                     if(buy==1){
                     dp[ind][buy][cap]= max( -prices[ind]+ dp[ind+1][0][cap], 0+dp[ind+1][1][cap]);
                    }
                    else{
                         dp[ind][buy][cap]= max(+prices[ind]+ dp[ind+1][1][cap-1], dp[ind+1][0][cap]);
                    }
                }
            }
        }
        return dp[0][1][2];
}
//MEMOIZATION TC: O(N*2*3), SC: O(N*2*3)+ O(N)
/*
int solve(int ind, int buy, int cap, vector<int>& prices, vector<vector<vector<int>>>& dp){
    int n= prices.size();
   if(ind==n){
    return 0;
   }
   if(cap==0){
    return 0;
   }
   if(dp[ind][buy][cap]!=-1){
    return dp[ind][buy][cap];
   }
    if(buy==1){
     return dp[ind][buy][cap]= max( -prices[ind]+ solve(ind+1,0, cap, prices, dp), 0+solve(ind+1, 1, cap, prices, dp));
    }
    else{
        return dp[ind][buy][cap]= max(+prices[ind]+ solve(ind+1,1, cap-1, prices, dp), solve(ind+1, 0, cap, prices, dp)); //When you sell a stock, 1 trans. is completed so cap-1
    }
}
//Maximum 2 transactions
    int maxProfit(vector<int>& prices) {
        int n= prices.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(2, vector<int>(3,-1)));
        int ans= solve(0,1,2,prices, dp);
        return ans;
}
*/
//RECURSION. TC: exponential, SC: O(N)-> AUXILLARY STACK SPACE
/*
int solve(int ind, int buy, int cap, vector<int>& prices){
    int n= prices.size();
   if(ind==n){
    return 0;
   }
   if(cap==0){
    return 0;
   }
    if(buy==1){
     return max( -prices[ind]+ solve(ind+1,0, cap, prices), 0+solve(ind+1, 1, cap, prices));
    }
    else{
        return max(+prices[ind]+ solve(ind+1,1, cap-1, prices), solve(ind+1, 0, cap, prices)); //When you sell a stock, 1 trans. is completed so cap-1
    }
}
//Maximum 2 transactions
    int maxProfit(vector<int>& prices) {
        int n= prices.size();
        int ans= solve(0,1,2,prices);
        return ans;
    }
    */
};
