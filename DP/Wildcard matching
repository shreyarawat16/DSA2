https://leetcode.com/problems/wildcard-matching/submissions/1350356034/

class Solution {
public:
//TABULATION. TC: O(N*M), SC: O(N+M)
bool isMatch(string s, string p) {
        int n = s.size(), m = p.size();
        vector<vector<bool>> dp(n + 1, vector<bool>(m + 1, false));
        //BASE CASE
        dp[0][0] = true;
        for(int k=1; k<=m; k++) {
            if(p[k - 1] == '*') dp[0][k] = true;
            else break;
        }

        for(int i=1; i<=n; i++) {
            for(int j=1; j<=m; j++) {
                if(s[i - 1] == p[j - 1] || p[j - 1] == '?') dp[i][j] = dp[i - 1][j - 1];
                if(p[j - 1] == '*') {
                    dp[i][j] = dp[i][j - 1] || dp[i - 1][j];
                }
            }
        }
        return dp[n][m];
    }
//MEMOIZATION. TC: O(N*M), SC: O(N*M)+O(N+M)
/*
bool solve(int i, int j, string s, string t, vector<vector<bool>>& dp){
    //BASE CASE
    if(i<0 && j<0){ //Both strings are exhausted
      return true;
    }
     if(j<0 && i>=0){ //String t is exhausted but string s is not
        return false;
    }
    if( i<0 && j>=0){  // string s is exhausted but string t is not
        for(int k=0; k<=j; k++){
            if(t[k]!= '*'){
                return false;
            }
        }
        return true;
    }
    if(dp[i][j]!= false){
        return dp[i][j];
    }
   
    //EXPLORE ALL POSSIBILITIES
    if(s[i]== t[j] || t[j]=='?'){
        return dp[i][j]= solve(i-1, j-1, s,t,dp );
    }
       if(t[j]=='*'){
       return dp[i][j]= solve(i-1, j, s, t, dp) || solve(i,j-1, s, t,dp); 
       //* means nothing OR * matched with last char of string t and reduce index j
       }
       return dp[i][j]= false;
}
    bool isMatch(string s, string p) {
        int n= s.size(), m= p.size();
        vector<vector<bool>> dp(n, vector<bool>(m, false));
        bool ans= solve(n-1, m-1, s, p, dp);
        return ans;
    }
    */
//RECURSION. TC: exponential, SC: O(N+M)
/*
bool solve(int i, int j, string s, string t){
    //BASE CASE
     if( j<0 && i>=0){
        return false;
    }
    if(i<0 && j<0){
    return true;
     }
    if( i<0 && j>=0){
        for(int k=0; k<=j; k++){
            if(t[k]!= '*'){
                return false;
            }
        }
        return true;
    }
   
    //EXPLORE ALL POSSIBILITIES
    if(s[i]== t[j] || t[j]=='?'){
        return solve(i-1, j-1, s,t );
    }
       if(t[j]=='*'){
       return solve(i-1, j, s, t) || solve(i,j-1, s, t); //* means nothing OR * matched with last char of string t and reduce index j
       }
       return false;
}
    bool isMatch(string s, string p) {
        int n= s.size(), m= p.size();
        bool ans= solve(n-1, m-1, s, p);
        return ans;
    }
    */
};
