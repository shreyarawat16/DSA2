https://leetcode.com/problems/longest-common-subsequence/


class Solution {
public:
//TABULATION
int longestCommonSubsequence(string text1, string text2) {
        int n= text1.size(), m= text2.size();
        vector<vector<int>> dp(n+1, vector<int>(m+1,0));
        //BASE CASE
        for(int i=0; i<=n; i++){
           dp[i][0]=0;
        }
        for(int i=0; i<=m; i++){
           dp[0][i]=0;
        }
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(text1[i-1]== text2[j-1]){
                  dp[i][j]= 1+ dp[i-1][j-1];
                }
                else{
                int op1= dp[i-1][j];
                int op2= dp[i][j-1];
                dp[i][j]= max(op1, op2);
               }
            }
        }
        return dp[n][m];
    }
};
//MEMOIZATION
/*
int solve(int i, int j, string& s1, string& s2,vector<vector<int>>& dp){
    if(i<0 || j<0)
    {
       return 0;
    }
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
    if(s1[i]== s2[j]){
        return dp[i][j]= 1+ solve(i-1, j-1, s1, s2, dp);
    }
    int op1= solve(i-1,j,s1,s2, dp);
    int op2= solve(i, j-1, s1, s2, dp);
    return dp[i][j]= max(op1, op2);
}
    int longestCommonSubsequence(string text1, string text2) {
        int n= text1.size(), m= text2.size();
        vector<vector<int>> dp(n, vector<int>(m,-1));
        return solve(n-1, m-1, text1, text2, dp);
        
    }
};
//RECURSION
/*
int solve(int i, int j, string& s1, string& s2){
    if(i<0 || j<0)
    {
       return 0;
    }
    if(s1[i]== s2[j]){
        return 1+ solve(i-1, j-1, s1, s2);
    }
    int op1= solve(i-1,j,s1,s2);
    int op2= solve(i, j-1, s1, s2);
    return max(op1, op2);
}
    int longestCommonSubsequence(string text1, string text2) {
        int n= text1.size(), m= text2.size();
        return solve(n-1, m-1, text1, text2);
        
    }
};
*/
