https://leetcode.com/problems/unique-paths/

class Solution {
public:
//TABULATION
int uniquePaths(int m, int n) {
       vector<vector<int>> dp(m, vector<int>(n,0));
       dp[0][0]=0;
       if(m==1 && n==1) return 1;
      for(int i=1; i<m; i++){
        dp[i][0]=1;
      }
      for(int i=1; i<n; i++){
        dp[0][i]=1;
      }
      
       for(int i=1; i<m ; i++){
        for(int j=1; j<n; j++){
            int up= dp[i-1][j];
            int left= dp[i][j-1];
            dp[i][j]=up+left;
        }
    }
       return dp[m-1][n-1];
    }
//MEMOIZATION
/*
int solve(int i, int j, vector<vector<int>>& dp){
    //BASE CASE
     if(i==0 || j==0){
        return 1;
     }
    
     if(dp[i][j]!=-1){
        return dp[i][j];
     }
     int up = solve(i-1, j, dp);
     int left= solve(i,j-1,dp);
     dp[i][j]= up+left;
     return dp[i][j];

}
    int uniquePaths(int m, int n) {
       
       vector<vector<int>> dp(m, vector<int>(n,-1));
       int ans= solve(m-1,n-1, dp);
       return ans;
}
*/
//RECURSION
/*
int solve(int i, int j){
    //BASE CASE
     if(i==0 || j==0){
        return 1;
     }
     if(i<0 || j<0){
        return 0;
     }
     int up = solve(i-1, j);
     int left= solve(i,j-1);
     return down+ right;

}
    int uniquePaths(int m, int n) {
       int ans= solve(m-1,n-1);
       return ans;
    }
    */
};
