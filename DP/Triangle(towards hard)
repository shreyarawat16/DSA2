https://leetcode.com/problems/triangle/description/

class Solution {
public:
//TABULATION. Bottom up. TC: O(N*N), SC: O(N*N)
int minimumTotal(vector<vector<int>>& triangle) {
        int n= triangle.size();
        int m= triangle[0].size();
        int dp[201][201];
        memset(dp,0, sizeof(dp));
      //base case
        for(int j=0; j<n; j++){
            dp[n-1][j]= triangle[n-1][j];
        }
        for(int i= n-2; i>=0; i--){
           for(int j=i; j>=0; j--){
             int down= triangle[i][j]+ dp[i+1][j];
             int right= triangle[i][j]+ dp[i+1][j+1];
             dp[i][j]= min(down, right);
           }
        }
    return dp[0][0];
}
      
//MEMOIZATION. TC:O(N*N), SC: O(N*N)+RECURSION STACK SPACE,O(N)
/*
int solve(int i, int j, vector<vector<int>>& triangle, int dp[201][201], int n, int m){
       if(i==n-1){ //j can be anything
        return triangle[i][j];
       }
       
       if(dp[i][j]!=-1){
        return dp[i][j];
       }
        int down= triangle[i][j]+  solve(i+1,j,triangle, dp, n, m);
        int diagnol=  triangle[i][j]+  solve(i+1, j+1, triangle, dp, n, m);
       return dp[i][j]= min(down, diagnol);
}
    int minimumTotal(vector<vector<int>>& triangle) {
        int n= triangle.size();
        int m= triangle[0].size();
        int dp[201][201];
        memset(dp,-1, sizeof(dp));
        int ans;
       int val= solve(0, 0, triangle, dp,n,m);
       return val;
}
*/
//RECURSION
/*
int solve(int i, int j, vector<vector<int>>& triangle, int& ans, int n, int m){
       if(i==n-1){
        return triangle[i][j];
       }
       if(i>n || j>m){
        return 1e9;
       }
        int down= triangle[i][j]+  solve(i+1,j,triangle, ans, n, m);
        int diagnol=  triangle[i][j]+  solve(i+1, j+1, triangle, ans, n, m);
       return min(down, diagnol);
}
    int minimumTotal(vector<vector<int>>& triangle) {
        int n= triangle.size();
        int m= triangle[0].size();
        int ans;
       int val= solve(0, 0, triangle, ans,n,m);
       return val;
    }
*/
};
