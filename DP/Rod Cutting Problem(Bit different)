https://www.naukri.com/code360/problems/rod-cutting-problem_800284?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&count=25&search=&sort_entity=order&sort_order=ASC&leftPanelTabValue=SUBMISSION&page=1

//TABULATION
int cutRod(vector<int> &price, int n)
{
	// Write your code here.
      vector<vector<int>> dp(n, vector<int>(n+1, 0));
    //BASE CASE
    for(int j=0; j<=n; j++){
       dp[0][j]= price[0]*j;
    }
    for(int i=1; i<n; i++){
        for(int j=0; j<=n; j++){
            int notTake= 0+dp[i-1][j];
            int take= -1e9;
            int rodLength= i+1;
            if(rodLength<= j){
                take= price[i]+ dp[i][j-rodLength];
            }
            dp[i][j]= max(take, notTake);
        }
    }
    return dp[n-1][n];
}

//MEMOIZATION
/*
int solve(int i,int target, vector<int>& price,  vector<vector<int>>& dp){
    if(i==0){
        return target* price[0];
    }
    if(dp[i][target]!=-1){
        return dp[i][target];
    }
    int notTake= solve(i-1, target, price, dp);
    int take= -1e9;
    int rodLength= i+1;
    if(rodLength<= target){
        take= price[i]+ solve(i, target- rodLength, price, dp);
    }
    return dp[i][target]= max(take, notTake);
}
int cutRod(vector<int> &price, int n)
{
	// Write your code here.
      vector<vector<int>> dp(n, vector<int>(n+1,-1));
    int ans= solve(n-1, n,price, dp);
     return ans;
}
*/
//RECURSION
/*
int solve(int i,int target, vector<int>& price){
    if(i==0){
        return target* price[0];
    }
    
    int notTake= solve(i-1, target, price);
    int take= -1e9;
    int rodLength= i+1;
    if(rodLength<= target){
        take= price[i]+ solve(i, target- rodLength, price);
    }
    return max(take, notTake);
}
int cutRod(vector<int> &price, int n)
{
	// Write your code here.

    int ans= solve(n-1, n,price);
     return ans;
}
*/
