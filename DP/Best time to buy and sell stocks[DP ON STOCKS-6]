https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/submissions/1352401295/

class Solution {
public:
//TABULATION
/*
int maxProfit(vector<int>& prices, int fee) {
        int n= prices.size();
        vector<vector<int>> dp(n+1, vector<int>(2,0));
        for(int buy=0; buy<2; buy++){
            dp[n][buy]=0;
        }
    for(int ind= n-1; ind>=0; ind--){
         for(int buy=0; buy<2; buy++){
             if(buy==1){
                dp[ind][buy]=max( -prices[ind]+ dp[ind+1][0], dp[ind+1][1]);
             }
             else{
                dp[ind][buy]=max(+prices[ind]- fee+ dp[ind+1][1], dp[ind+1][0]);
                 }
            }
        }
    return dp[0][1];
}
*/
//MEMOIZATION

int solve(int ind, int buy, vector<int>& arr, int fee,  vector<vector<int>>& dp){
    int n= arr.size();
    if(ind== n){
        return 0;
    }
    if(dp[ind][buy]!=-1){
        return dp[ind][buy];
    }
    if(buy==1){
        return dp[ind][buy]=max( -arr[ind]+ solve(ind+1,0, arr, fee,dp), solve(ind+1,1,arr, fee,dp));
    }
    else{
        return dp[ind][buy]=max(+arr[ind]- fee+ solve(ind+1,1, arr, fee,dp), solve(ind+1,0, arr, fee,dp));
    }
}
    int maxProfit(vector<int>& prices, int fee) {
        int n= prices.size();
        vector<vector<int>> dp(n, vector<int>(2,-1));
        int ans= solve(0,1, prices, fee, dp);
        return ans;
    }

//RECURSION
/*
int solve(int ind, int buy, vector<int>& arr, int fee){
    int n= arr.size();
    if(ind== n){
        return 0;
    }
    if(buy==1){
        return max( -arr[ind]+ solve(ind+1,0, arr, fee), solve(ind+1,1,arr, fee));
    }
    else{
        return max(+arr[ind]- fee+ solve(ind+1,1, arr, fee), solve(ind+1,0, arr, fee));
    }
}
    int maxProfit(vector<int>& prices, int fee) {
        int n= prices.size();
        int ans= solve(0,1, prices, fee);
        return ans;
    }
*/
};
