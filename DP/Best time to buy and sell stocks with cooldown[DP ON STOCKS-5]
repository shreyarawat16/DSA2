https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/submissions/1350890845/

class Solution {
public:
//TABULATION
 int maxProfit(vector<int>& prices) {
        int n= prices.size();
        vector<vector<int>> dp(n+2, vector<int>(2, 0));
       //base case
       /* for(int buy=0; buy<2; buy++){
            dp[n][buy]=0;
        }
        */
        for(int ind=n-1; ind>=0; ind--){
            for(int buy=0; buy<2; buy++){
                 if(buy==1){
        dp[ind][buy]= max(-prices[ind]+ dp[ind+1][0], 0+dp[ind+1][1]);
    }
    else{
         dp[ind][buy]= max(+prices[ind]+ dp[ind+2][1], dp[ind+1][0]);
    }
            }
        }
        return dp[0][1];
    }
//MEMOIZATION
/*
int solve(int ind, int buy, vector<int>& prices, vector<vector<int>>& dp){
    //BASE CASE
    int n= prices.size();
    if(ind>= n){
        return 0;
    }
    if(dp[ind][buy]!= -1){
        return dp[ind][buy];
    }
    if(buy==1){
        return dp[ind][buy]= max(-prices[ind]+ solve(ind+1, 0, prices,dp), 0+solve(ind+1, 1, prices,dp));
    }
    else{
        return dp[ind][buy]= max(+prices[ind]+ solve(ind+2, 1, prices,dp), solve(ind+1, 0, prices,dp));
    }
}
    int maxProfit(vector<int>& prices) {
        int n= prices.size();
        vector<vector<int>> dp(n, vector<int>(2,-1));
        int ans= solve(0,1, prices, dp);
        return ans;
    }
 */   
//RECURSION
/*
int solve(int ind, int buy, vector<int>& prices){
    //BASE CASE
    int n= prices.size();
    if(ind>= n){
        return 0;
    }
    if(buy==1){
        return max(-prices[ind]+ solve(ind+1, 0, prices), 0+solve(ind+1, 1, prices));
    }
    else{
        return max(+prices[ind]+ solve(ind+2, 1, prices), solve(ind+1, 0, prices));
    }
}
    int maxProfit(vector<int>& prices) {
        int n= prices.size();
        int ans= solve(0,1, prices);
        return ans;
    }
*/
};
